# -*- coding: utf-8 -*-
"""Credit_card_fraud_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XimheHRO3FWZ0IPPtxwSP71WIpovM6Mk
"""

#Step1: Import libraries

#basic libraries
import numpy as np
import pandas as pd
#Visualization
import matplotlib.pyplot as plt
import seaborn as sns
#Machine Learning
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

#Step2: Load Dataset

df = pd.read_csv("/content/creditcard.csv")
df.head()

#Step3: Understand the Data

df.shape

#Checking for missing values
df.isnull().sum()

df.info()

print(df['Class'].value_counts())


fraud_percentage = df["Class"].value_counts(normalize=True)[1]*100
print(f"fraud transactions: {fraud_percentage:.4f}%")

#Step4: Data Visualization

#visulize class imbalance
sns.countplot(x="Class", data=df)
plt.title("Class Distribution")

#check transaction amount distribution
sns.boxplot(x="Class",y="Amount", data=df)
plt.title("Transaction Amount by class")

#Step5: Preprocessing
#scale the "Amount" column
scaler = StandardScaler()
df["Amount"] = scaler.fit_transform(df[["Amount"]])

#seprate features and target
x = df.drop("Class", axis=1)
y = df["Class"]

#split into training and test sets
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size=0.2, stratify=y, random_state=42)

# In simple words:
#This code prepares the data for training by:

#Scaling the amount,

#Separating inputs and output,

#Splitting the data into training and testing sets.

#Step6: Model building

#Train a random forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(x_train, y_train)

#predict on test data
y_pred = model.predict(x_test)

y_pred = model.predict(x_test)

#Step7: Model Evaluation

#Confusion Matrix
conf_matrix = confusion_matrix(y_test,y_pred)
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")

#Classifciation Report
print(classification_report(y_test,y_pred))

import joblib

# Save the trained MOdel
joblib.dump(model, "fraud_detection_model.pkl")